<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>5种IO模型</title>
    <link href="/2024/01/16/5%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/01/16/5%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><p>IO(input&#x2F;Output),即数据的读取或写入操作，通常分为两个阶段，用户进程空间&lt;-&gt;内核空间，内核空间&lt;-&gt;IO设备(磁盘，网络等)，IO有内存IO、网络IO和磁盘IO三种，平常常说的IO是指后两者。</p><h1 id="5种IO模型"><a href="#5种IO模型" class="headerlink" title="5种IO模型"></a>5种IO模型</h1><h2 id="阻塞IO（BIO-block-io）"><a href="#阻塞IO（BIO-block-io）" class="headerlink" title="阻塞IO（BIO - block io）"></a>阻塞IO（BIO - block io）</h2><p>我们都知道，在操作系统种，进程是无法直接访问IO设备的，所以一般需要进入内核态才可以去访问，所以IO操作需要发起系统调用。</p><p>而阻塞IO模型下，进程发起IO系统调用后，进程会被阻塞，转到内核空间处理，而只有等到整个IO处理完毕，即数据从IO设备中加载到内核缓冲区中，然后再加载到进程中才算IO流程结束，这时才会返回进程，且在进程中可以获取到数据</p><h2 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h2><p>非阻塞IO仍然是同步IO模型，即发起IO系统调用之后，相比阻塞IO来看，在数据还没加载到内核时，会从阻塞IO的进程阻塞变为了返回一个错误（例如EWOULDBLOCK），因此进程需要不断检查IO请求是否已经完成，这通常需要大量的轮询操作，比较消耗CPU</p><h2 id="IO复用模型"><a href="#IO复用模型" class="headerlink" title="IO复用模型"></a>IO复用模型</h2><p>多路复用模型，最常见的就是用在网络IO之中，复用的是进程，使得一个进程可以同时处理多个网络连接的IO。</p><p>将多个IO socket注册得到一个复用器(例如select)上，然后用一个进程调用该复用器，复用器会监听所有注册进来的IO，当某个socket有数据到达了，就通知用户进程，不同的监听方法和复用器的选择有关</p><p>常用的几种就是<code>select</code>,<code>poll</code>,<code>epoll</code></p><h2 id="信号驱动IO模型"><a href="#信号驱动IO模型" class="headerlink" title="信号驱动IO模型"></a>信号驱动IO模型</h2><p>当进程发起一个IO操作，会向内核注册一个信号处理函数，然后进程返回不阻塞，当内核数据就绪时会发送一个信号给进程，这时进程再调用信号处理函数读取数据，信号驱动IO是基于硬件中断的。</p><p>这是基于事件的回调模型，其本质还是同步IO，因为数据的实际IO操作，例如从内核缓冲区拷贝到用户空间还是需要被阻塞等待的</p><h2 id="异步IO模型（AIO）"><a href="#异步IO模型（AIO）" class="headerlink" title="异步IO模型（AIO）"></a>异步IO模型（AIO）</h2><p>前四种都是同步IO,只有这一种是异步IO，当进程发起一个IO操作时，进程返回，然后去处理其他的事情，直到内核把整个IO处理完后，会通知进程结果，如果操作成功则直接获取到数据</p>]]></content>
    
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>延迟队列的实现（golang）</title>
    <link href="/2024/01/13/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88golang%EF%BC%89/"/>
    <url>/2024/01/13/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%88golang%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>延迟队列是一种特殊的队列，元素入队时需要指定具体到期的时间，这样每次从队头出队的元素就一定是到期的，而且是最先到期的一个元素。添加元素和出队的时间复杂度是O(log(n))</p><p>常用的场景基本都是一些定时任务，或者延迟任务，例如订单功能中，30分钟后取消订单，或者定时任务，例如30分钟后通知用户等情况</p><p>其实从功能上来看就是一个定时任务，那么例如go中其实就有<code>time.After</code>等方法可以设定定时器方法，那么为什么还需要我们自己实现呢？</p><p>这是因为延时队列其实能够做到对定时任务的一个管理功能，以及性能上其实也会更好，如果是单个功能其实直接用<code>time</code>的方法就可以满足我们的需求了，但是如果在大量延迟任务以及动态或者复杂的延迟任务场景，他就无法满足需求了</p><p>在性能上，如果我们有大量的定时任务，那么其实就需要开启大量的goroutine来处理，这样其实相对低效，因为在任务到时间之前这些协程都是在空跑的，没有太大的意义</p><p>在灵活性上，因为定时任务在你开启之时你就需要确定好你的任务执行时间，而如果这时你想要调整它的执行时间的话，其实是不支持的，只能通过<code>reset</code>方法来重置定时器了</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>延迟队列每次都需要出队最快到期的元素，其实就是一个小根堆的数据结构，堆正是用来获取最值的，使用堆我们可以实现O(log(n))的时间复杂度</p><p>这里接下来主要参考的是nq</p>]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-回旋镖的数量</title>
    <link href="/2024/01/08/leetcode-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F/"/>
    <url>/2024/01/08/leetcode-%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-447-回旋镖的数量"><a href="#leetcode-447-回旋镖的数量" class="headerlink" title="leetcode-447 回旋镖的数量"></a>leetcode-447 回旋镖的数量</h1><blockquote><p><a href="https://leetcode.cn/problems/number-of-boomerangs/description/">原链接 leetcode-447-mid</a></p></blockquote><p>给定平面上 <code>n</code> 对 <strong>互不相同</strong> 的点 <code>points</code> ，其中 <code>points[i] = [xi, yi]</code> 。<strong>回旋镖</strong> 是由点 <code>(i, j, k)</code> 表示的元组 ，其中 <code>i</code> 和 <code>j</code> 之间的距离和 <code>i</code> 和 <code>k</code> 之间的欧式距离相等（<strong>需要考虑元组的顺序</strong>）。</p><p>返回平面上所有回旋镖的数量。</p><h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><p>这题没想到什么比较特别的算法，首先想到的就是枚举+哈希，以每一个<code>point</code>来作为回旋镖拐点，计算其他每个点到当前点的距离，假设有m个点到<code>point</code>的距离相等，那么就需要从这m个点中选两个点来做为回旋镖的两个角，且要考虑顺序，那么就是$A^2_m$ &#x3D; m*(m-1)</p><p>所以思路很简单，即以每一个点为拐点来计算与其他点的距离，然后用一个哈希表来存储，由于距离都是正数，所以直接存其平方值即可，每一次枚举完都去遍历哈希表，按照上述公式去计算以<code>point</code>为拐点，且距离为<code>item</code>的个数有多少个，然后累加即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numberOfBoomerangs</span><span class="hljs-params">(points [][]<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-comment">// 枚举，将每一个节点与其他节点的距离都计算出，使用哈希表来存储，之后遍历哈希表即可计算</span><br>    ans := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> index,point := <span class="hljs-keyword">range</span> points&#123;<br>        m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br>        <span class="hljs-keyword">for</span> index2,point2 := <span class="hljs-keyword">range</span> points &#123;<br>            <span class="hljs-keyword">if</span> index == index2&#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125; <br>            dis := (point[<span class="hljs-number">0</span>]-point2[<span class="hljs-number">0</span>])*(point[<span class="hljs-number">0</span>]-point2[<span class="hljs-number">0</span>]) + (point[<span class="hljs-number">1</span>]-point2[<span class="hljs-number">1</span>])*(point[<span class="hljs-number">1</span>]-point2[<span class="hljs-number">1</span>])<br>            m[dis]++<br>        &#125;<br>        <span class="hljs-keyword">for</span> _,item := <span class="hljs-keyword">range</span> m &#123;<br>            ans += item*(item<span class="hljs-number">-1</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis大Key问题</title>
    <link href="/2024/01/07/redis%E5%A4%A7Key%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/07/redis%E5%A4%A7Key%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Redis大Key"><a href="#什么是Redis大Key" class="headerlink" title="什么是Redis大Key"></a>什么是Redis大Key</h2><p>这里的大key其实指的是某个key所指向的value所占的内存空间较大，从而导致redis的性能下降、内存不足、数据不均衡以及主从同步延迟等问题。</p><p>多大的内存才算大key？其实这没有固定的标准，这取决于系统的需求，例如在高并发且低延迟的系统中，可能几kb就构成了大key，影响了redis的性能，而在其他场景下，可能几kb的内存没有什么影响，所以需要根据业务需求和性能指标来确定合理的大key阈值。</p><h2 id="大key会导致什么问题"><a href="#大key会导致什么问题" class="headerlink" title="大key会导致什么问题"></a>大key会导致什么问题</h2><p>当redis中存在大量的大key时，会对性能和内存使用方面产生较大的负面影响，可以从以下四个方面来看：</p><h3 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h3><p>这点毋庸置疑，在redis中内存是有一个上限的，如果达到了内存的上限后会可能会引发服务宕机，或者触发redis的驱逐机制，将一些重要的key提前删除</p><p>且在分片集群中，某个数据的内存使用率远超其他数据分片，无法使数据分片的内存资源达到均衡</p><h3 id="网络传输延迟"><a href="#网络传输延迟" class="headerlink" title="网络传输延迟"></a>网络传输延迟</h3><p>redis是单线程的模型来处理请求，那么在处理单个大Key请求的时候，会使得redis实例的带宽使用率被占满，导致自身服务变慢。例如：1个大key占用1MB，每秒访问1000次，就有1000MB的流量。</p><p>且会阻塞了后续的其他请求，导致了严重的性能影响，降低系统的吞吐量。</p><h3 id="主从同步延迟"><a href="#主从同步延迟" class="headerlink" title="主从同步延迟"></a>主从同步延迟</h3><p>主从的同步过程中是从节点从主节点复制数据，当从节点连接到主节点之后，主节点会创建一个后台进程将数据写到一个RDB文件中，同时主节点会将此期间新产生的写命令全部缓存起来，然后将创建的RDB文件发送给从节点进行数据的初始化，再将缓存的写命令发给从节点，从节点接收并执行这些写命令进行数据初始化，完成数据同步。</p><p>而大key的写操作在这里就会在从节点写入时阻塞了从节点的进程，而使得主从同步延迟，进而影响数据一致性。</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>除了以上的问题以外，对于持久化其实也是有影响的，我们知道在AOF和RDB中，redis是<code>fork</code>了一个子进程来进行持久化操作的，而子进程此时是复制了一份页表过来，和父进行共享数据，如果存在较多大key，会导致对应的页表占用空间也大，从而在<code>fork</code>复制页表的时候阻塞了redis进程</p><p>此外，redis的持久化还有一个<code>写时复制(Copy On Write)</code>机制，在<code>fork</code>持久化的时候，如果共享内存发起了修改操作时，CPU就会触发写保护中断（违反权限导致），操作系统在<code>写保护中断处理函数</code>里进行物理内存的复制，如果是大key的话复制是一个较耗时的机会，如果是在父进程也会阻塞了redis进程</p><h2 id="如何处理大key"><a href="#如何处理大key" class="headerlink" title="如何处理大key"></a>如何处理大key</h2><h3 id="对大key进行拆分"><a href="#对大key进行拆分" class="headerlink" title="对大key进行拆分"></a>对大key进行拆分</h3><p>例如value为<code>hash</code>时，可能是一个<code>hash</code>保存的成员太多，所以需要将一个key拆分为多个<code>hash key</code>。</p><h3 id="对大key进行清理"><a href="#对大key进行清理" class="headerlink" title="对大key进行清理"></a>对大key进行清理</h3><p>将某些不适合存储在redis中大key存至其他存在，并在redis中进行删除</p><blockquote><p>redis4.0之后的版本，可以同个<code>Unlink</code>命令安全删除大key，该命令可以以非阻塞的方式，逐步清理传入的key</p><p>而在之前的版本，可以先通过<code>SCAN</code>命令读取部分数据进行删除，避免一次性删除大量key阻塞</p></blockquote><h3 id="对过期数据定期清理"><a href="#对过期数据定期清理" class="headerlink" title="对过期数据定期清理"></a>对过期数据定期清理</h3><p>堆积大量过期数据可能会造成大key的产生，比如<code>hash</code>类型数据中一直以增量形式写入大量数据，而写入的数据没有任何时效性，那么久很容易造成大key的产生，所以需要使用定时任务进行清理。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang context解析</title>
    <link href="/2023/12/02/golang-context%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/12/02/golang-context%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Context"><a href="#什么是Context" class="headerlink" title="什么是Context"></a>什么是Context</h2><p><code>context</code>是golang中的一个经典工具，他不是一种数据结构，其实底层是一个<code>interface</code>,主要是在异步场景中用于实现并发协调以及对<code>goroutine</code>的生命周期控制，除此之外，还可以用来在同一个<code>goroutine</code> 中存储数据，在这里简单来了解一下<code>context</code>的一个实现。</p><h2 id="context-Context"><a href="#context-Context" class="headerlink" title="context.Context"></a>context.Context</h2><p>首先要了解一下他的结构，前面说了<code>Context</code>其实是一个interface类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Context <span class="hljs-keyword">interface</span>&#123;<br>    Deadline() (time.Time,<span class="hljs-type">bool</span>) <span class="hljs-comment">// 返回ctx的过期时间</span><br>    Done() &lt;- <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; <span class="hljs-comment">// 返回一个用来标识ctx是否结束的chan</span><br>    Err() <span class="hljs-type">error</span> <span class="hljs-comment">// 返回ctx的错误</span><br>    Value(key any) any <span class="hljs-comment">// 返回ctx存放的对应key和value</span><br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外，还定义了一些标准的错误类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> Canceled = errors.New(<span class="hljs-string">&quot;context canceled&quot;</span>) <span class="hljs-comment">// ctx 被取消了</span><br><br><span class="hljs-keyword">var</span> DeadlineExceeded <span class="hljs-type">error</span> = deadlineExceededError&#123;&#125; <span class="hljs-comment">// ctx 过期</span><br><br><span class="hljs-keyword">type</span> deadlineExceededError <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(deadlineExceededError)</span></span> Error() <span class="hljs-type">string</span>   &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;context deadline exceeded&quot;</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(deadlineExceededError)</span></span> Timeout() <span class="hljs-type">bool</span>   &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(deadlineExceededError)</span></span> Temporary() <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="emptyCtx"><a href="#emptyCtx" class="headerlink" title="emptyCtx"></a>emptyCtx</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> emptyCtx <span class="hljs-type">int</span> <span class="hljs-comment">// 一个空的context，本质是一个整型</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Deadline() (deadline time.Time,ok <span class="hljs-type">bool</span>) &#123; <span class="hljs-keyword">return</span> &#125; <span class="hljs-comment">// 返回一个公元元年时间以及false的flag，标识当前 context 不存在过期时间</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Done() &lt;- <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125; <span class="hljs-comment">// 返回一个 nil 值，用户无论往nil中写入或者读取数据，都会阻塞</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Err() <span class="hljs-type">error</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125; <span class="hljs-comment">// 返回值永远为 nil</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(*emptyCtx)</span></span> Value(key any) any &#123;<br>    <span class="hljs-keyword">return</span><br>&#125; <span class="hljs-comment">// 返回值同样为 nil</span><br></code></pre></td></tr></table></figure><p><code>emptyCtx</code> 其实就是对 <code>Context</code> 的一个实现，而用过<code>context</code>包的应该都知道<code>context.Background()</code> 和 <code>context.TODO()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>    background = <span class="hljs-built_in">new</span>(emptyCtx)<br>    todo = <span class="hljs-built_in">new</span>(emptyCtx)<br>)<br></code></pre></td></tr></table></figure><p>两者的本质是一样的，但是在使用上其实是有一定规范，<code>background</code> 通常是由主函数，初始化和测试使用，并作为传入请求的顶级上下文，而<code>TODO</code>就是当不知道要使用哪个<code>Context</code>时使用的，后续需要将其替换掉，其实就是语义的区别</p><h2 id="cancelCtx"><a href="#cancelCtx" class="headerlink" title="cancelCtx"></a>cancelCtx</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> cancelCtx <span class="hljs-keyword">struct</span> &#123;<br>    Context<br>   <br>    mu       sync.Mutex            <span class="hljs-comment">// protects following fields</span><br>    done     atomic.Value          <span class="hljs-comment">// of chan struct&#123;&#125;, created lazily, closed by first cancel call</span><br>    children <span class="hljs-keyword">map</span>[canceler]<span class="hljs-keyword">struct</span>&#123;&#125; <span class="hljs-comment">// set to nil by the first cancel call</span><br>    err      <span class="hljs-type">error</span>                 <span class="hljs-comment">// set to non-nil by the first cancel call</span><br>&#125;<br><br><span class="hljs-keyword">type</span> canceler <span class="hljs-keyword">interface</span> &#123;<br>    cancel(removeFromParent <span class="hljs-type">bool</span>, err <span class="hljs-type">error</span>)<br>    Done() &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到cancelCtx其实是有一个Context作为其父context的，而还有一个children来指向<code>cancelCtx</code>的所有子context</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端搭建</title>
    <link href="/2023/11/27/%E5%89%8D%E7%AB%AF%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/11/27/%E5%89%8D%E7%AB%AF%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>最近打算开始写毕设的选题，因为好久没碰过前端开发了，这里来简单记录一下从头开始搭建的过程吧</p><h2 id="使用vite搭建"><a href="#使用vite搭建" class="headerlink" title="使用vite搭建"></a>使用vite搭建</h2><p>进入项目文件夹，执行以下语句</p><p><code>npm create vite@latest Aurora-ui</code></p><p>后面就是选择对应的框架以及语言了，这里选择了<code>vue</code>和<code>js</code>（因为前面用ts然后被各种检查折磨了一会，因为不太熟悉，所以还是选用js，避免在此耗较多时间）</p><p>之后根据提示，进入目录，安装依赖(<code>npm install</code>),然后正常启动项目(<code>npm run dev</code>)就可以了</p><h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><h3 id="配置vite-config"><a href="#配置vite-config" class="headerlink" title="配置vite.config"></a>配置vite.config</h3><p>我们经常看到 import 的时候路径是<code>@/xxx</code>,而自己使用时却查不到路径，这是因为没有在<code>vite.config.js</code>里面配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; resolve &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">base</span>: <span class="hljs-string">&#x27;./&#x27;</span>,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>  <span class="hljs-comment">// 配置别名</span><br>  <span class="hljs-attr">resolve</span>:&#123;<br>    <span class="hljs-attr">alias</span>:&#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>:<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&#x27;./src&#x27;</span>),<br>    &#125;,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>除了这个以外，我们还要配置一下server相关的内容，包括端口号，http是否启动等，这个根据项目需求配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; resolve &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">base</span>: <span class="hljs-string">&#x27;./&#x27;</span>,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>  <span class="hljs-attr">resolve</span>:&#123;<br>    <span class="hljs-attr">alias</span>:&#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>:<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&#x27;./src&#x27;</span>),<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">server</span>:&#123;<br>    <span class="hljs-comment">// 是否开启https</span><br>    <span class="hljs-attr">https</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 端口号</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,<br>    <span class="hljs-comment">// 监听所有地址</span><br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<br>    <span class="hljs-comment">// 服务启动时是否自动打开浏览器</span><br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// 允许跨域</span><br>    <span class="hljs-attr">cors</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 自定义代理规则</span><br>    <span class="hljs-attr">proxy</span>: &#123;&#125;,<br>  &#125;,<br><br>  <span class="hljs-comment">// 打包相关配置</span><br>  <span class="hljs-attr">build</span>:&#123;<br>    <span class="hljs-comment">// 设置最终构建的浏览器兼容目标</span><br>    <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;es2015&#x27;</span>,<br>    <span class="hljs-comment">// 构建后是否生成 source map文件</span><br>    <span class="hljs-attr">sourcemap</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-comment">// chunk 大小警告的限制(以 kbs 为单位)</span><br>    <span class="hljs-attr">chunkSizeWarningLimit</span>: <span class="hljs-number">2000</span>,<br>    <span class="hljs-comment">// 启用/禁用 gzip 压缩大小报告</span><br>    <span class="hljs-attr">reportCompressedSize</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">|-- dist/<br>|-- src/<br>    |-- api/ 接口列表<br>    |-- assets/ 静态资源<br>    |-- components/ 公共组件<br>    |-- constant/ 常量<br>    |-- router/ 路由<br>    |-- store/ 状态管理<br>    |-- types/ 类型<br>    |-- utils/ 工具集<br>    |-- views/ 页面组件<br></code></pre></td></tr></table></figure><h3 id="集合路由"><a href="#集合路由" class="headerlink" title="集合路由"></a>集合路由</h3><p>执行命令下载对应依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs npm">yarn add vue-router@4   <br></code></pre></td></tr></table></figure><p>然后开始在<code>src/router</code>下新建<code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>;<br><span class="hljs-keyword">import</span> baseRouters <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/base&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; rollupVersion &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span>;<br><span class="hljs-comment">// import base from &#x27;./modules/base/base&#x27;;</span><br><br><span class="hljs-keyword">const</span> routes = [...baseRouters];<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>    routes,<br>    <span class="hljs-title function_">scrollBehavior</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>            <span class="hljs-attr">top</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;smooth&#x27;</span>,<br>        &#125;;<br>    &#125;,<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br><br></code></pre></td></tr></table></figure><p>接下来挂载路由配置</p><p>在<code>main.js</code>中去添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./style.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="集成Pinia全局状态管理工具"><a href="#集成Pinia全局状态管理工具" class="headerlink" title="集成Pinia全局状态管理工具"></a>集成Pinia全局状态管理工具</h3><p><code>yarn add pinia</code></p><p>目录结构同<code>router</code>,在modules下添加一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>,&#123;<br>    <span class="hljs-attr">state</span>: <span class="hljs-function">()=&gt;</span> (&#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,<br>    &#125;),<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-title function_">accumulate</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>++<br>        &#125;,<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后在<code>index.js</code>中export出去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createPinia</span>();<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module/auth&#x27;</span>;<br></code></pre></td></tr></table></figure><p>最后在<code>main.js</code>中挂载</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>毕设</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识raft（2）</title>
    <link href="/2023/11/25/raft2/"/>
    <url>/2023/11/25/raft2/</url>
    
    <content type="html"><![CDATA[<h3 id="分布式一致性共识算法"><a href="#分布式一致性共识算法" class="headerlink" title="分布式一致性共识算法"></a>分布式一致性共识算法</h3><p>前面讲了CAP的问题，但是实际的系统设计并非非黑即白，C和A并非是绝对的对立，存在一个互相协调的存在</p><p>分布式共识算法，就是做的一个找到了一定取舍的一个设计</p><p>分布式一致性共识算法，指的是在分布式系统种，使得所有节点对同一份数据的认知能够达成共识的算法，它主要强调的是一致性问题，但是通过对应的算法机制，在尽可能少的牺牲C的基础上，去提高了A的水平</p><p>而raft则是一种一致性共识算法，在可用性A上，raft能保证当前分布式系统中<code>存在半数以上节点存活时，系统是稳定可用的</code>,同时请求耗时取决于多数派的下限，而非所有节点的下限，一定程度上避免了木桶短板效应</p><p>而在C上，raft算法能够保证数据满足最终一致性，而且在工程化的落地上，经常也会被修改而去保证可以保证数据的强一致性</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raft</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器基础</title>
    <link href="/2023/11/19/%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/11/19/%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>容器的关键词是<code>隔离</code>，容器的本质是进程，其实就是将进程划分为各个空间且互相独立，互不干扰</p><h2 id="docker和虚拟机的区别"><a href="#docker和虚拟机的区别" class="headerlink" title="docker和虚拟机的区别"></a>docker和虚拟机的区别</h2><p>说到进程划分为空间，我们往往会想到docker，以及在此之前的虚拟机，首先了解一下两者有什么区别</p><img src="/2023/11/19/%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8Cdocker.png" class title="图片"><p>虚拟机是通过<code>Hypervisor</code>,虚拟化出了对应的硬件，CPU，内存等，并在之上去安装一个<code>guest os</code>,将程序跑在对应的os之上，这样就可以做到了隔离</p><p>而docker不一样，docker的隔离不是通过docker engine去做的，而是通过操作系统的<code>namespace</code>和<code>cgroup</code>做到的。</p><p>docker容器其实还是跑在宿主机上的一个进程，只不过通过<code>namespace</code>去进行隔离，使得容器进程只能看到自己，而不能看到宿主机的其他进程，而通过<code>cgroup</code>也做到了一些对应的内存，CPU的使用限制</p><p>这样的架构也正是Docker比虚拟机更受欢迎的原因，想使用虚拟化技术作为应用沙盒，就必须要由<code>Hypervisor</code>来负责创建虚拟机，这个虚拟机是真实存在的，且必须在虚拟机里面运行一个完整的<code>Guest OS</code>才能来执行用户的应用进程，这不可避免的带来了额外的资源消耗和应用</p><blockquote><p>根据实验，一个运行着的CentOS的KVM虚拟机启动后，在不做优化的情况下，虚拟机自己就需要占用100-200MB内存，此外，用户应用运行在虚拟机里面，它对宿主机操作系统的调用就不可避免地要经过虚拟化软件的拦截和处理，这本身又是一层性能损耗，尤其对计算资源、网络和磁盘IO损耗非常大</p></blockquote><p>相比执行，容器化后的用户应用，其实还是宿主机上的一个普通进程，所以并没有因为虚拟化带来的各种性能损耗，而另外一方面，使用Namespace作为隔离手段的容器并不需要单独的Guest OS，这就使得容器额外的资源占用几乎可以忽略不计</p><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p>前面提到了namespace，首先来了解一下这个机制，其实说来很简单，就是在创建一个新进程时，设定对应的namespace参数，这也会使得新创建的进程看到一个全新的空间，例如PID的namespace，正常在进程中执行ps，会看到宿主机的所有进程，而在加了参数后创建的进程中，它所看到的进程只有它自己，它会认为自己才是操作系统的一号进程，即容器中的一号进程，而看不到之前的进程了。</p><p>除了PID的namespace以外，操作系统还提供了<code>Mount</code>,<code>UTS</code>,<code>IPC</code>,<code>Network</code>,<code>User</code>等，用来对各种不同进程上下文进程“障眼法”操作</p><p>例如<code>Mount</code>，用于让被隔离进程只能看到当前Namespace里的挂载点信息</p><p>不过只有namespace的话，缺点也很明显，就是隔离的不够彻底，首先多个容器之间使用的还是同一个操作系统内核，比如在低版本linux宿主机上运行高版本的linux容器，是行不通的，而且还有很多资源和对象是不能被 Namespace 化的，例如时间，如果在容器中通过<code>settimeofday(2)</code>系统调用去修改了时间，整个宿主机1的时间也会随之修改</p><p>所以说容器的这个namespace隔离其实只是一个障眼法，实质上，它所能够调用到的资源，例如CPU、内存等，都是可以被宿主机上的其他进程(或者其他容器)占用的，即他们仍然是要竞争对应的资源，这样是很不合理的</p><h2 id="Cgroup"><a href="#Cgroup" class="headerlink" title="Cgroup"></a>Cgroup</h2><p>而Cgroup（Control Group）则是linux内核中用来为进程设置资源限制的一个重要功能，避免资源被某个进程所完全占用，限制一个进程组能够使用的资源上限，包括CPU，内存，磁盘，网络带宽等等</p><p>它的使用也很方便，即一个子系统目录下加上一组资源限制文件的组合，在容器里来说，即在每个子系统下为每个容器创建一个控制组(一个新目录)，然后在启动容器进程后，把进程PID写入对应控制组的tasks文件即可</p><h2 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h2><p>rootfs即根文件系统，正常情况下，新创建一个容器，我们往往就会有一个自己容器的根目录，我们会在这个容器的根目录下挂在一个完整操作系统的文件系统，这也，在容器里通过执行<code>ls /</code>查看根目录下的内容，就是对应操作系统的所有目录和文件</p><p>而这个挂载在容器根目录上，用来为容器进程提供隔离后执行环境的文件系统，就是所谓的<code>容器镜像</code>，还有另外一个名字，即<code>rootfs</code></p><p>不过rootfs和虚拟机的操作系统不一样，它只是一个操作系统所包含的文件、配置和目录，并不包括操作系统内核，在linux系统中，操作系统只有在开机启动时才会加载指定版本的内核镜像，而对于容器来说，同一个机器上的所有容器，都共享宿主机操作系统的内核，可以把内核看成一个所有容器的<code>全局变量</code>，这也是相比虚拟机的一个缺点</p><h3 id="容器的一致性"><a href="#容器的一致性" class="headerlink" title="容器的一致性"></a>容器的一致性</h3><p>正是由于<code>rootfs</code>的存在，容器才有了一个重要特性：<code>一致性</code></p><p>这个一致性我的理解就是环境的一致性，在常规的Paas平台中，最为难受的一点就是云端和实际生产的环境不同，但是<code>rootfs</code>解决了这个问题，它不止打包了应用，还把整个操作系统的文件目录全打包了起来，即打包了整个程序的运行环境，而这个方法使得程序的依赖打包不止局限在编程语言层面上了，更是深入到了操作系统本身，使得操作系统这个最基础的依赖环境，也成为了应用沙盒的一部分，这就是容器所宣称的特性，无论在任何地方，只要解压打包好的容器镜像，那么就可以完整的复现整个应用程序所需要的执行环境了。</p><h2 id="UnionFs"><a href="#UnionFs" class="headerlink" title="UnionFs"></a>UnionFs</h2><p>联合文件系统(Union File System)</p><p>我们现在来考虑一个问题，即如果我们每次开发都需要从头制作一次rootfs吗，如果我们所需要的底层操作系统环境是一致的，或者我刚好是基于另外一个人开发完的程序上进行修改，那么我可不可以复用它的rootfs呢，只是做一些增量修改，而不需要从头制作，如果有了解docker镜像原理的话，那么很明显就知道这个是完全可以的，这是基于docker镜像的一个<code>layer</code>的概念</p><p>docker公司在制作镜像时，对用户制作的每一步，都去生成一个层，即一个增量的<code>rootfs</code>，这种设计是用到了<code>UnionFs</code>的能力</p><p>它主要的功能是将多个不同位置的目录联合挂载到同一个目录下，即例如有一个目录A，下面有a，x两个文件，有一个目录B，下面有b，x两个文件，这时使用unionfs将其挂载到目录C下，这时去看目录C，会发现下面包括了<code>a,b,x</code>三个，它不仅可以看到a和b两个文件，还会把x做了一个合并，并且在C下面对文件进行修改，在A和B中也是可以看到的。</p><h3 id="镜像的分层结构"><a href="#镜像的分层结构" class="headerlink" title="镜像的分层结构"></a>镜像的分层结构</h3><p>一个镜像中，底层是可读层，即<code>ro+wh</code>(readonly+whiteout),通常是包含了操作系统的各个增量层</p><p>而第二部分，是可读写层，这是容器的rootfs最上面的一层，它的挂载方式是<code>rw</code>,即<code>read write</code>,在没有写入文件之前，这个目录是空的，而一旦在容器中做了写操作，就会将修改产生的内容以增量的方式出现在这个层中，如果修改的是底层只读方式挂载的文件，那么就会以写时复制的机制，将文件拷贝一份到可读写层中，且屏蔽了该<code>rootfs</code>接下来对只读层该文件的读写操作，这也就可以做到修改只读层的内容</p><p>而如果是删除的话，就涉及了前面的<code>whiteout</code>，AuFS会在可读写层创建一个<code>whiteout</code>文件，把只读层里的文件<code>遮挡</code>起来，例如删除一个<code>foo</code>的文件，就会在可读写层创建一个<code>.wh.foo</code>文件，这样当两个层被联合挂载后，foo文件就会被.wo.foo文件遮挡起来，而达到了消失的效果</p><p>所以可读写层其实是放一些rootfs的一个增量修改，修改之后还可以通过<code>commit</code>或<code>push</code>操作，将修改过的可读写层，上传到Docker Hub上，而可以被其他人直接使用</p><p>最后一部分是<code>init层</code>，在只读层和读写层之间，是Docker下面单独生成一个内部层，专门用来存放<code>/etc/hosts</code>,<code>/etc/resolv.conf</code>等信息</p><blockquote><p>需要这一层的原因是，这些文件本来属于只读的Ubuntu镜像的一部分，但是用户往往需要在启动容器时写入一些指定的值，比如<code>hostname</code>,所以就需要在可读写层对它们进行修改，但是这些修改往往只对当前容器有效，在commit的时候不希望把这些信息和可读写层一起提交，所以Docker的设计是在修改了这些文件之后，会以一个单独的层挂载出来</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识raft(1)</title>
    <link href="/2023/11/19/raft/"/>
    <url>/2023/11/19/raft/</url>
    
    <content type="html"><![CDATA[<p>golang的经典项目 - mit 6.824，最后的lab就是基于raft实现的一个kv数据库</p><p>那么什么是raft算法？首先要知道raft是一种分布式一致性共识算法，是一个非拜占庭的一致性算法（后面会介绍什么是拜占庭问题），简单来说，即raft认为所有通信是正确的而非伪造的，则在N个节点的情况下(N为奇数)，可以最多容忍(N-1)&#x2F;2(N-1)&#x2F;2个单点故障</p><h2 id="分布式共识算法"><a href="#分布式共识算法" class="headerlink" title="分布式共识算法"></a>分布式共识算法</h2><h3 id="如何提高大规模数据的读写性能"><a href="#如何提高大规模数据的读写性能" class="headerlink" title="如何提高大规模数据的读写性能"></a>如何提高大规模数据的读写性能</h3><p>先来思考一个问题，正常我们写demo的时候，都是单mysql节点作为一个持久化的中间件，那么如果数据过多，mysql支持不了这么高的并发量要怎么解决？</p><p>我们常说加钱可以解决性能问题，其实就是纵向扩展，即换个更好的服务器，加硬件加配置，这个方法简单有效，但是往往涉及一个问题，即性能到达一定程度之后，想要再进一步的难度就会陡然提升</p><p>那这时候往往还有另外一种思路，即横向扩展，不同于纵向扩展，往单服务器去堆配置了，而是用多台服务器来解决同一个问题，但是这种扩展方式又涉及了另外一个问题，我们知道网络情况是不稳定的，出现什么情况都有可能，那么多服务器之间的通信就很容易出现问题，例如我用了mysql的主从模式，服务往主数据库写入数据时，在同步到从数据库时消息没同步过去，这时候不就会导致在这段时间内的一个主从数据不一致的问题，即我明明写入了消息，但是在读时却查找不到。</p><p>所以这种方式在网络环境理想化的情况下是非常好的，通过横向扩展，不仅能将节点压力分流，还可以做到数据的容灾备份等，从而提高系统性能的一个上限，但是使用这种方法，我们就要想办法解决前面说的一个网络状态的问题，将该问题出现的情况细分一下，其实包括了很多要处理的问题：</p><ol><li>多节点之间的数据一致性问题 - 最终一致性或者强一致性</li><li>可用性问题</li><li>脑裂、崩溃、超时等问题</li></ol><p>所以多节点比单节点复杂了很多，单节点的操作处理是很稳定的，要么成功要么失败，且不涉及多链路的一个操作，耗时也较短</p><p>但是单节点如果出现了崩溃则会直接导致整个服务的不可用，而且由于单节点没有分流，很容易出现大流量而使其宕机</p><h3 id="分布式基础-CAP理论"><a href="#分布式基础-CAP理论" class="headerlink" title="分布式基础 - CAP理论"></a>分布式基础 - CAP理论</h3><p>学习分布式最开始肯定会接触到CAP理论，这是最经典的分布式系统理论(Consistency-Availability,Partition tolerance Theory)</p><ul><li>C：Consistency 一致性</li></ul><p>一致性强调是数据的正确性，即强一致性，具体到操作上来看，就是每个读操作，要么读到最新的数据，要么读操作失败，而不会存在读到一个中间的状态，这就要求设计分布式系统时需要把整个分布式系统作为一个不可拆分的一个整体。</p><ul><li>A：Availability 可用性</li></ul><p>可用性是从用户角度来看，不只是服务能否成功响应，还包括了能否在一定时间内响应，当用户等待较长时间时也同样认为是不可用的</p><ul><li>P：Partition tolerance 分区容忍性</li></ul><p>这个是从网络角度来看的，前面也说了网络环境是不可靠的，而网络分区则是因为节点之间网络通讯的失败而产生的，例如AB两节点，由于网络异常问题无法通信，这时候就认为出现了网络分区，而P的角度是希望在网络环境不可靠的情况下，系统仍然是正常运行的，不至于因为这个网络问题而使得服务崩溃的问题</p><p>而CAP理论中，它主要指出了一个问题，即分布式系统的设计中，最多只能同时满足CAP中的两个，即只有三种设计架构，满足CA，CP或AP</p><p>而由于网络环境的不可靠，分区是很可能会出现的，所以往往设计的时候需要考量P，即通常是<code>AP</code>或<code>CP</code>两种架构</p><p><code>CP</code>是强调数据的准确性，它希望的是一种强一致性的状态，宁愿舍弃一定的可用性，也要保证获得的数据是必定最新的</p><p><code>AP</code>是强调服务的可用性，可以牺牲一定的数据的准确性，即容忍获得一个旧数据或一个错误的数据，来保证客户端能及时获得一个响应</p><p>在后面又基于CAP出现了一个新的理论，是作为一致性和可用性权衡的一个结果，是由CAP逐步演化过来的，其来源于对大型互联网分布式实践的总结，称为BASE理论。</p><h4 id="C的问题"><a href="#C的问题" class="headerlink" title="C的问题"></a>C的问题</h4><h5 id="即时一致性问题"><a href="#即时一致性问题" class="headerlink" title="即时一致性问题"></a>即时一致性问题</h5><p>当一个服务端有master和follower两个节点，这时候向master节点写入了一个数据x&#x3D;3，而master这时候要按照设定好的同步规则，去将该写入同步给follower节点，而在同步过程中，客户端发起了一个请求，查询x的值，这时候请求就打到了follower节点，而这时候的返回值是不确定的，读到的数据和客户端的预期结果就出现了偏差，如果是同步策略是同步的，那么就能正确读到，而如果是异步操作，那么就无法保证数据的正确了</p><h5 id="顺序一致性问题"><a href="#顺序一致性问题" class="headerlink" title="顺序一致性问题"></a>顺序一致性问题</h5><p>这个问题比较有意思，其实主要是因为网络问题的存在，加上tcp的重传机制产生的</p><p>考虑这样一个场景，客户端向master节点发送了两个set请求，例如<code>set x = 3;set x = 4</code>,而这时master会向从节点按序同步该两个操作，但是由于网络问题，可能第一个<code>set x = 3</code>操作在网络传输中丢失了，然后<code>set x = 4</code>操作先到达follower了，而<code>set x = 3</code>操作由于重传机制，后到达了从节点，而会使得从节点的数据变为了<code>x=3</code>,但是在matser中<code>x=4</code>,这样就是一个比较严重的问题了，数据的更改丢失了，导致后面的结果是错误的。</p><h4 id="A的问题"><a href="#A的问题" class="headerlink" title="A的问题"></a>A的问题</h4><p>想解决C的问题，其实用同步+串行化操作即可，只有确保将数据都同步完了，才给客户端响应，而这样无论客户端请求哪个节点，获得的数据都是一致性的</p><p>但是这样就会导致客户端在写入时进入阻塞的时间变长，因为需要等待所有数据的同步，这种方法将多节点系统看成了一个整体，类似于单节点一般，写入时就确保了数据的一致性，但是也存在了其他的问题</p><p>比如某个follower节点宕机了，这时由于数据没有所有节点都同步完成，则服务不会响应，那么对于客户端来说，这就是一个不可用的情况，而且过度的放大了故障，将单节点故障扩为了整体系统的故障</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>raft</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode-443 压缩字符串</title>
    <link href="/2023/11/19/leetcode-443-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/11/19/leetcode-443-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="leetcode-443-压缩字符串"><a href="#leetcode-443-压缩字符串" class="headerlink" title="leetcode-443  压缩字符串"></a>leetcode-443  压缩字符串</h1><blockquote><p><a href="https://leetcode.cn/problems/string-compression/?envType=study-plan-v2&envId=leetcode-75">原链接 leetcode-433 mid</a></p></blockquote><p>这一题没什么太大的复杂地方，题意就是对字符串进行压缩，将型如<code>aabbccc</code>压缩为<code>a2b2c3</code>的形式</p><p>直接遍历一遍即可，双指针，left和right，left是一组单词的开始，而right往后遍历找到第一个非chars[left]的字母或者找到字符串结尾即结束，然后将left跳到right当前的位置即可，对不起它mid的难度，所以就不过多记录了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
      <tag>每日一题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sync.Pool源码解析</title>
    <link href="/2023/11/09/sync-Pool%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/11/09/sync-Pool%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="Sync-Pool-功能"><a href="#Sync-Pool-功能" class="headerlink" title="Sync.Pool 功能"></a>Sync.Pool 功能</h2><p>一句话来说，就是用来保存和复用临时对象，减少内存的分配，降低GC的压力</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span>&#123;<br>    Name <span class="hljs-type">string</span><br>    Age <span class="hljs-type">int32</span><br>    Remark [<span class="hljs-number">1024</span>]<span class="hljs-type">byte</span><br>&#125;<br><br><span class="hljs-keyword">var</span> buf,_ = json.Marshal(Student&#123;Name:<span class="hljs-string">&quot;Geektutu&quot;</span>,Age:<span class="hljs-number">25</span>&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">unmarsh</span><span class="hljs-params">()</span></span>&#123;<br>    stu := &amp;Student&#123;&#125;<br>    json.Unmarshal(buf,stu)<br>&#125;<br></code></pre></td></tr></table></figure><p>正常高并发情况下，短时间内可能需要创建大量的临时对象，而这些对象都是分配在堆上，会给GC造成很大压力，严重影响程序的性能</p><p>所以可以使用<code>sync.Pool</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> studentPool = sync.Pool&#123;<br>    New: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>(Student)<br>    &#125;,<br>&#125;<br><br><span class="hljs-comment">// 从对象池中获取对象，返回值是interface&#123;&#125;,需要类型转换</span><br>stu := studentPool.Get().(*Student)<br>json.Unmarshal(buf,stu)<br><span class="hljs-comment">// Put - 在对象使用完后返回对象池</span><br>studentPool.Put(stu)<br></code></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7237679967949520933">https://juejin.cn/post/7237679967949520933</a></p><h2 id="Pool结构"><a href="#Pool结构" class="headerlink" title="Pool结构"></a>Pool结构</h2><img src="/2023/11/09/sync-Pool%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/pool.jpg" class title="图片">]]></content>
    
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++学习</title>
    <link href="/2023/10/31/C-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/10/31/C-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="C-虚函数"><a href="#C-虚函数" class="headerlink" title="C++虚函数"></a>C++虚函数</h3><p>C++虚函数的作用是实现动态多态，即让基类的指针或者引用能够根据实际指向的对象类型来调用相应的成员函数，虚函数可以在子类中被覆盖(重写)，从而实现多态。纯虚函数是一种特殊的虚函数，没有函数体，只有声明，并且要求子类必须重写它。</p><p>含有纯虚函数的类叫做抽象类，它不能创建对象。</p><h2 id="红黑树和AVL树"><a href="#红黑树和AVL树" class="headerlink" title="红黑树和AVL树"></a>红黑树和AVL树</h2><h3 id="STL容器"><a href="#STL容器" class="headerlink" title="STL容器"></a>STL容器</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2023/10/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/10/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="数组和链表的遍历性能比较"><a href="#数组和链表的遍历性能比较" class="headerlink" title="数组和链表的遍历性能比较"></a>数组和链表的遍历性能比较</h3><p>数组是连续空间，而链表是偏跳跃式的，而我们又知道，CPU是有缓存的，所以在遍历数组时，当缓存丢失时，会从内存去读取数据，并且一次性加载一批数据进来，这样遍历下一个时就很大概率会在缓存中查到，而链表是跳跃式的，很容易就跳出缓存，需要去内存中查找。</p><h3 id="程序的地址空间，从高地址到低地址，分别是哪些区域"><a href="#程序的地址空间，从高地址到低地址，分别是哪些区域" class="headerlink" title="程序的地址空间，从高地址到低地址，分别是哪些区域"></a>程序的地址空间，从高地址到低地址，分别是哪些区域</h3><p>C语言中的是栈区、堆区、未初始化数据区、初始化数据区、代码区</p><p>go语言中的是</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><h3 id="IP地址与子网划分"><a href="#IP地址与子网划分" class="headerlink" title="IP地址与子网划分"></a>IP地址与子网划分</h3><ul><li><p>A类用于大型网络（能容纳网络126个，主机1677214台）</p></li><li><p>B类用于中型网络（能容纳网络16384个，主机65534台）</p></li><li><p>C类用于小型网络（容纳网络2097152个，主机254台）</p></li><li><p>D类用于组播（多目的地址的发送）</p></li><li><p>E类用于实验</p></li><li><p>A: 0.0.0.0 -&gt; 126.255.255.255 第一位 00000000</p></li><li><p>B: 128.0.0.0 -&gt; 191.255.255.255 第一位 10000000</p></li><li><p>C: 192.0.0.0 -&gt; 223.255.255.255 第一位 11000000</p></li><li><p>D: 224.0.0.0 -&gt; 239.255.255.255 第一位 11100000</p></li><li><p>E: 240.0.0.0 -&gt; 247.255.255.255 第一位 11110000</p></li></ul><p>私网地址:</p><ul><li>A: 10.0.0.1 - 10.255.255.254</li><li>B: 172.16.0.1 - 172.31.255.254</li><li>C: 192.168.0.1 - 192.168.255.254</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis八股</title>
    <link href="/2023/10/25/redis%E5%85%AB%E8%82%A1/"/>
    <url>/2023/10/25/redis%E5%85%AB%E8%82%A1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql八股</title>
    <link href="/2023/10/25/mysql%E5%85%AB%E8%82%A1/"/>
    <url>/2023/10/25/mysql%E5%85%AB%E8%82%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><ul><li>第一范式：每个列不可再分</li><li>第二范式：在第一范式基础上，非主键都完全依赖于主键，而不是依赖于主键的一部分</li><li>第三范式：在第二范式的基础上，非主键只依赖于主键，不依赖于其他非主键</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="WAL"><a href="#WAL" class="headerlink" title="WAL"></a>WAL</h3><p>WAL(write ahead log),即预写日志，在写入磁盘前先记录日志</p><p>虽然日志也要写入磁盘，但是日志是追加写，而磁盘是随机写，追加写会比随机写快</p><p>mysql中主要有四种日志，接下来逐一了解</p><h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>redo log - 重做日志</p><p>在数据库中至关重要，确保了数据库的可靠性和持久性，是<code>事务处理</code>和<code>数据恢复</code>的关键组成</p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>undo log - 撤销日志</p><h3 id="relay-log"><a href="#relay-log" class="headerlink" title="relay log"></a>relay log</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang八股</title>
    <link href="/2023/10/24/golang%E5%85%AB%E8%82%A1/"/>
    <url>/2023/10/24/golang%E5%85%AB%E8%82%A1/</url>
    
    <content type="html"><![CDATA[<div align="center"> <font size="70"> Golang八股</font></div><p>秋招即将结束，在这里简单记录一下面试中常问的golang相关知识点（不定期更新）</p><h2 id="GMP模型"><a href="#GMP模型" class="headerlink" title="GMP模型"></a><font face="微软雅黑" color="2cb0d9">GMP模型</font></h2><p>首先要知道协程是用户态线程，内核无感知，不像线程一样是由CPU来进行调度</p><h2 id="GC机制"><a href="#GC机制" class="headerlink" title="GC机制"></a>GC机制</h2><h2 id="内存逃逸"><a href="#内存逃逸" class="headerlink" title="内存逃逸"></a>内存逃逸</h2><h2 id="netpoll"><a href="#netpoll" class="headerlink" title="netpoll"></a>netpoll</h2><h2 id="内存分配模型"><a href="#内存分配模型" class="headerlink" title="内存分配模型"></a>内存分配模型</h2><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><h3 id="如何关闭一个goroutine"><a href="#如何关闭一个goroutine" class="headerlink" title="如何关闭一个goroutine"></a>如何关闭一个goroutine</h3><p>goroutine是go中一个比较重要的特性，而有时候开始一个goroutine，我们需要在另外一个协程去去它进行通信，例如告知该协程关闭应该如何处理？</p><p>goroutine之间的通信其实就是用<code>channel</code>,我们常用的就是向g中传递一个信号通道，并通过向该通道中发送停止信号而去中止该协程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    quit := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> &#123;<br>            <span class="hljs-keyword">select</span> &#123;<br>            <span class="hljs-keyword">case</span> &lt;- quit:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-comment">// TODO</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    quit &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><h3 id="channel的特点"><a href="#channel的特点" class="headerlink" title="channel的特点"></a>channel的特点</h3><ol><li>如果给nil的channel发送数据，会导致永久阻塞</li><li>从nil的channel接收数据，会永久阻塞</li><li>向已关闭的channel发送数据，会导致panic</li><li>从已关闭的channel中读取数据，若缓冲区未满，则返回缓冲区的值，否则返回管道中数据类型的零值</li><li>正常向channel中写入数据，如果channel中缓存区未满，则将值写入缓冲区，否则加入写阻塞队列，协程阻塞</li><li>从channel中读取数据，如果channel中缓冲区存在数据，则直接取出，否则加入读等待队列，协程阻塞</li><li>关闭一个nil channel会导致panic</li><li>关闭一个已关闭的channel也会导致panic</li></ol><h3 id="如何得知channel是已关闭的"><a href="#如何得知channel是已关闭的" class="headerlink" title="如何得知channel是已关闭的"></a>如何得知channel是已关闭的</h3><p>我们知道，从已关闭接口中读取也是能正常读到数据的，和未关闭的没有比较大的区分，所以在go中，一般通过</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">data,ok := &lt;- <span class="hljs-keyword">chan</span><br></code></pre></td></tr></table></figure><p>当ok&#x3D;false时，说明channel是被关闭了</p><h3 id="channel的底层结构"><a href="#channel的底层结构" class="headerlink" title="channel的底层结构"></a>channel的底层结构</h3><h3 id="生产者消费者模型中，如果消费者消费速率过慢，那么如何实现当生产者往channel中写入数据时如果缓冲区已满则放弃写入"><a href="#生产者消费者模型中，如果消费者消费速率过慢，那么如何实现当生产者往channel中写入数据时如果缓冲区已满则放弃写入" class="headerlink" title="生产者消费者模型中，如果消费者消费速率过慢，那么如何实现当生产者往channel中写入数据时如果缓冲区已满则放弃写入"></a>生产者消费者模型中，如果消费者消费速率过慢，那么如何实现当生产者往channel中写入数据时如果缓冲区已满则放弃写入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span>&#123;<br>    <span class="hljs-keyword">select</span>&#123;<br>    <span class="hljs-keyword">case</span> ch &lt;- data:<br>        <span class="hljs-comment">// TODO</span><br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">// TODO</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过select来实现，当写入时执行某个操作，如果写入失败则执行default</p><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><h3 id="Mutex的状态"><a href="#Mutex的状态" class="headerlink" title="Mutex的状态"></a>Mutex的状态</h3><ul><li>mutexLocked - 互斥锁的锁定状态</li><li>mutexWoken - 从正常模式被唤醒</li><li>mutexStarving - 互斥锁进入饥饿状态</li><li>waitersCount - 互斥锁上等待的goroutine个数</li></ul><h3 id="Mutex的正常模式和饥饿模式"><a href="#Mutex的正常模式和饥饿模式" class="headerlink" title="Mutex的正常模式和饥饿模式"></a>Mutex的正常模式和饥饿模式</h3><ol><li>正常模式（非公平锁）</li></ol><p>正常模式下，所有等待锁的goroutine按照FIFO顺序等待，唤醒的goroutine不会直接拥有锁，而是会和新请求goroutine竞争锁，新请求的goroutine会更容易抢占锁，<code>因为它正在CPU上执行</code>,所以刚刚唤醒的goroutine大概率竞争失败，在这种情况下，被唤醒的goroutine会加入到等待队列的前面</p><ol start="2"><li>饥饿模式（公平锁）</li></ol><p>为了解决等待goroutine队列的长尾问题，饥饿模式下，直接由unlock把锁交给等待队列中排在第一位的goroutine(即队头)，同时饥饿模式下，新进来的goroutine不会参与抢锁也不会进入自旋状态，会直接进入等待队列的尾部，这样就避免旧的goroutine一直获取不到锁</p><h3 id="饥饿模式的触发条件"><a href="#饥饿模式的触发条件" class="headerlink" title="饥饿模式的触发条件"></a>饥饿模式的触发条件</h3><p>当一个goroutine等待锁时间超过1ms时，或者当前队列只剩下一个goroutine，Mutex就切换到饥饿模式</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>是互斥锁的一种实现方式，当线程尝试获取一个锁时，如果发现这个锁被其他线程占用，它会不断地尝试获取锁，而不是放弃CPU的控制权，这个过程被称为自旋，能够有效地减少线程切换的开销、提高锁的性能，因为它避免了进程上下文的调度开销，对短时间内的线程阻塞是有效的</p><p>但是如果是长时间的线程阻塞，如果不断自旋，就始终占用了一个CPU，就会使得程序的执行效率降低</p><h3 id="Mutex允许自旋的条件"><a href="#Mutex允许自旋的条件" class="headerlink" title="Mutex允许自旋的条件"></a>Mutex允许自旋的条件</h3><ul><li>锁已经被占用，且不处于饥饿状态</li><li>积累的自旋次数小于最大自旋次数(active_spin&#x3D;4)</li><li>CPU核数大于1</li><li>有空闲的P</li><li>当前g所挂载的P下，本地待运行队列为空（占用一个线程，避免使得后续的协程被阻塞）</li></ul><h2 id="Sync相关"><a href="#Sync相关" class="headerlink" title="Sync相关"></a>Sync相关</h2><h3 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h3><h3 id="sync-Cond"><a href="#sync-Cond" class="headerlink" title="sync.Cond"></a>sync.Cond</h3><h3 id="sync-Once"><a href="#sync-Once" class="headerlink" title="sync.Once"></a>sync.Once</h3><h3 id="sync-Pool"><a href="#sync-Pool" class="headerlink" title="sync.Pool"></a>sync.Pool</h3><h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h2><h3 id="传递"><a href="#传递" class="headerlink" title="传递"></a>传递</h3><p>数据是<code>值传递</code>的，切片是<code>引用传递</code></p><h3 id="切片结构"><a href="#切片结构" class="headerlink" title="切片结构"></a>切片结构</h3><h3 id="切片扩容"><a href="#切片扩容" class="headerlink" title="切片扩容"></a>切片扩容</h3><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="new和make的区别"><a href="#new和make的区别" class="headerlink" title="new和make的区别"></a>new和make的区别</h3><p><code>new(T)</code>是创建一个该类型的实例,返回指向该实例的指针，使用new来分配空间</p><p><code>make</code>是使用于slice，channel，map类型的，主要是对该类型做一定的初始化，然后返回的是初始化后的实例，而不是和new一样是指针</p><h3 id="defer的执行顺序"><a href="#defer的执行顺序" class="headerlink" title="defer的执行顺序"></a>defer的执行顺序</h3><p>赋值 -&gt; defer -&gt; return</p><p>defer是类似于栈，先入后出</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>八股</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2023/10/24/%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/10/24/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2023/10/24/%E6%B5%8B%E8%AF%95/test.png" class title="图片"><!-- <img src="/2023/10/24/%E6%B5%8B%E8%AF%95/test.png" class="" title="This is a image"> -->]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/24/hello-world/"/>
    <url>/2023/10/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
